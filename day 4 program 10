#10. Scramble String We can scramble a string s to get a string t using the following algorithm: If the length of the string is 1, stop. If the length of the string is > 1, do the following:Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where  s = x + y. Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.Apply step 1 recursively on each of the two substrings x and y.Given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false. 
def is_scramble(s1: str, s2: str) -> bool:
    if len(s1) != len(s2):
        return False

    n = len(s1)
    dp = [[[False] * (n+1) for _ in range(n)] for _ in range(n)]

    for i in range(n):
        for j in range(n):
            dp[i][j][1] = s1[i] == s2[j]

    for l in range(2, n+1):
        for i in range(n-l+1):
            for j in range(n-l+1):
                for k in range(1, l):
                    if (dp[i][j][k] and dp[i+k][j+k][l-k]) or (dp[i][j+l-k][k] and dp[i+k][j][l-k]):
                        dp[i][j][l] = True
                        break

    return dp[0][0][n]

s1 = input("Enter string 1: ")
s2 = input("Enter string 2: ")

if is_scramble(s1, s2):
    print("true")
else:
    print("false")
